openapi: 3.0.0
info:
  title: Cloud TSP detokenization API
  description: >
    # Introduction
    
    The API provies methods for detokenizing and sending notification
    
    # Security
    
    The API relies on different security layers:
    
    * At transport level, TLS Mutual Authentication is used.
    * At application level, sensitive card information (PAN) is encrypted using Java Web Encryption specification defined in RFC-7516 using Compact Serialization.
    
    ## Certificates for the client
    
    Two separate certificates would be required from the client. A client certificate for mutual TLS and a data encryption certificate.
    The client should generate a CSR using a 2048-bit or 4096-bit key, and the certificates will be generated by BankAxept.
    
    # References
    
    * Thales, ISO 8583 Interface with Cloud TSP. The Cloud TSP detokenization API is an alternate interface to the ISO 8583 described in this document.  
      The ISO 8583 document contains more detailed description on the behaviour of the different operations.
  version: "1.0-DRAFT_2022-08-31"
paths:
  /detokenize:
    post:
      description: >
        This endpoint performs the necessary cryptographical verifications to the transaction, 
        and returns a CipheredDetokenizedCard containing the card details.

        This endpoint is only suited for payment detokenization use.
      tags:
        - payment
      operationId: detokenize
      parameters:
        - name: x-request-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            example: d069b004-5714-4823-9457-98c32c6e785f
          description: Should uniquely identify the request and will be used to trace calls across the systems.
      requestBody:
        description: Request to validate and detokenize.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetokenizationRequest'
        required: true
      responses:
        500:
          description: Internal server error, the request could not be processed. The client could retry sending the message.
        400:
          description: Bad request from the client. The request contains one or more invalid parameters. This needs to be fixed before attempting to send the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        200:
          description: Sucessful operation. The request was processed, and the result of the operation much be checked in the responseCode property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetokenizationResponse'
      x-codegen-request-body-name: body
  /notify:
    post:
      description: >
        This endpoint is used to report the result of payment transaction to the TSP, and to trigger a notification towards card holders wallet.
        
        Differently from the ISO 8583 only actionCode in the closed list are accepted.
      tags:
        - payment
      operationId: notify
      parameters:
        - name: x-request-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 36
            example: d069b004-5714-4823-9457-98c32c6e785f
          description: Should uniquely identify the request and will be used to trace calls across the systems.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      responses:
        500:
          description: Internal server error, the request could not be processed. The client could retry sending the message.
        400:
          description: Bad request from the client. The request contains one or more invalid parameters. This needs to be fixed before attempting to send the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        204:
          description: Successful operation. The request was processed successfully.
      x-codegen-request-body-name: body
  /healthcheck:
    get:
      description: This endpoint is used to check the readiness of the API.
      tags:
        - healthcheck
      operationId: healthcheck
      responses:
        204:
          description: Health check completed sucessfully.
components:
  schemas:
    DetokenizationRequest:
      required:
        - scheme
        - tokenizedCard
        - reference
        - amount
        - transactionDateTime
        - transactionType
        - panEntryMode
      properties:
        scheme:
          $ref: '#/components/schemas/Scheme'
        tokenizedCard:
          $ref: '#/components/schemas/TokenizedCard'
        reference:
          $ref: '#/components/schemas/Reference'
        merchantCategoryCode:
          description: Conditional field with values used to enable the classification of merchants into specific categories based on the type of business, trade or services supplied. Values are defined in ISO 18245. This field is conditional based on business requirements of scheme.
          type: string
          format: string
          pattern: '\d{4}'
          example: "5812"
        amount:
          $ref: '#/components/schemas/Amount'
        transactionDateTime:
          description: The time of the transaction, note that the millisecond will be ignored when processing the message.
          type: string
          format: date-time
          example: 2021-12-24T10:00:10.500Z
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        panEntryMode:
          $ref: '#/components/schemas/PanEntryMode'
        cardAcceptor:
          $ref: '#/components/schemas/CardAcceptor'
        chipRelatedData:
          $ref: '#/components/schemas/ChipRelatedData'
    DetokenizationResponse:
      required:
        - responseCode
        - responseMessage
      properties:
        responseCode:
          $ref: "#/components/schemas/ResponseActionCode"
        responseMessage:
          description: Textual message corresponding to the responseCode.
          type: string
          format: text
        cipheredDetokenizedCard:
          $ref: '#/components/schemas/CipheredDetokenizedCard'
    NotificationRequest:
      required:
        - scheme
        - reference
        - amount
        - transactionType
        - actionCode
      properties:
        scheme:
          $ref: '#/components/schemas/Scheme'
        reference:
          $ref: '#/components/schemas/Reference'
        amount:
          $ref: '#/components/schemas/Amount'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        actionCode:
          $ref: '#/components/schemas/ResponseActionCode'
    CipheredDetokenizedCard:
      type: string
      maxLength: 8196
      minLength: 1
      description: >
        Card information as JSON is encrypted according to the 
        Java Web Encryption specification defined in RFC-7516 using Compact Serialization.<br/>
        
        * The content encryption algorithm used is A256-GCM.
        
        * The key encryption algorithm is RSAES-OAEP.
        
        * See schema DetokenizedCard for decrypted data format.
    DetokenizedCard:
      type: object
      required:
        - pan
        - expiry
      properties:
        pan:
          type: string
          format: numeric
        expiry:
          $ref: '#/components/schemas/Expiry'
    TokenizedCard:
      type: object
      required:
        - pan
        - expiry
        - panSequenceNumber
      properties:
        pan:
          $ref: '#/components/schemas/Token'
        expiry:
          $ref: '#/components/schemas/Expiry'
        panSequenceNumber:
          $ref: '#/components/schemas/PanSequenceNumber'
    Expiry:
      description: Expiry expressed as yymm
      type: string
      pattern: '(\d{2})+(0[1-9]|1[0-2])'
      example: "2410"
    Amount:
      description: An amount with a value and a currency code.
      type: object
      required:
        - value
        - currency
      properties:
        value:
          description: Amount expressed as minor units, the smallest unit of a currency.
          type: string
          format: numeric
          example: 229900
        currency:
          description: Three letter code as described in ISO 4217.
          type: string
          pattern: '[A-Z]{3}'
          example: EUR
    TransactionType:
      type: string
      description: >
        Transaction Types:
        
           * `00` - Purchases & Services
           * `09` - Purchase with cashback
           * `20` - Refunds
           * `22` - Credit reversal
           * `52` - Credit - return of goods
           * `92` - Confirmation of a pre-authorization
      enum:
        - "00"
        - "09"
        - "20"
        - "22"
        - "52"
        - "92"
      example: "00"
    PanEntryMode:
      type: string
      description: >
        PAN Entry Mode:
        
          * 00: Unknown
          * 01: PAN manual entry
          * 02: PAN read in Magnetic stripe
          * 03: PAN read in Magnetic stripe (fallback to chip reading issue)
          * 04: PAN read in QR code
          * 05: PAN read in contact chip
          * 06: PAN/Token entry via electronic commerce with optional AAV
          * 07: PAN read in contactless chip
          * 08: PAN/Token entry via electronic commerce containing cryptogram in field 55
      enum:
        - "00"
        - "01"
        - "02"
        - "03"
        - "04"
        - "05"
        - "06"
        - "07"
        - "08"
      example: "04"
    CardAcceptor:
      type: object
      required:
        - identificationCode
        - name
      properties:
        identificationCode:
          description: Point of the transaction in both local and interchange environments. Uniquely identify a merchant in a POS transaction.
          type: string
          minLength: 15
          maxLength: 15
        name:
          description: Card acceptor name
          type: string
          maxLength: 22
          example: "Restaurant Maaemo"
        zip:
          description: Zip code
          type: string
          maxLength: 5
          example: "0290"
        city:
          description: City
          type: string
          maxLength: 128
          example: "Oslo"
        region:
          description: State, Province,
          type: string
          maxLength: 128
          example: "OSL"
        countryCode:
          description: ISO 3166 Alpha 2 format.
          type: string
          maxLength: 2
          example: "NO"
    Token:
      description: The token
      type: string
      pattern: '\d{1,19}'
      example: "90615205001511804"
    Reference:
      description: Unique reference for the transaction. For example; use concatenation of ISO fields 37 and 7 if mapping from ISO 8583 Interface with Cloud TSP, or a UUID.
      type: string
      maxLength: 36
      minLength: 12
      example: f89c37ef-f7bd-4220-928f-3f4287e261a4
    Scheme:
      description: Identifies the payment scheme, open or closed loop.
      type: string
      example: BankAxept
    ChipRelatedData:
      type: object
      required:
        - amountAuthorized
        - amountOther
        - terminalCountryCode
        - terminalVerificationResult
        - transactionCurrencyCode
        - transactionDate
        - transactionType
        - unpredictableNumber
        - applicationInterchangeProfile
        - applicationTransactionCounter
        - issuerApplicationData
        - applicationCryptogram
        - cryptogramInformationData
      properties:
        amountAuthorized:
          description: EMV tag 9F02, authorised amount of the transaction (excluding adjustments).
          type: string
          pattern: '\d{12}'
          example: '000000042100'
        amountOther:
          description: EMV tag 9F03, secondary amount associated with the transaction representing a cashback amount.
          type: string
          pattern: '\d{12}'
          example: '000000042100'
        terminalCountryCode:
          description: EMV tag 9F1A, indicates the country of the terminal, represented according to ISO 3166.
          type: string
          pattern: '\d{3}'
          example: "578"
        terminalVerificationResult:
          description: EMV tag 95, status of the different functions as seen from the terminal
          type: string
          maxLength: 10
          minLength: 10
          example: "0000000000"
        transactionCurrencyCode:
          description: EMV tag 5F2A, Indicates the currency code of the transaction according to ISO 4217
          type: string
          maxLength: 3
          minLength: 3
          example: "578"
        transactionDate:
          description: EMV tag 9A, local date of the transaction, in YYMMDD format.
          type: string
          maxLength: 6
          minLength: 6
          example: "220428"
        transactionType:
          description: EMV tag 9C, type of transaction. the processing code.
          type: string
          pattern: '\d{2}'
          example: "00"
        unpredictableNumber:
          description: EMV tag 9F37, unpredicable number generated by the terminal, encoded as hex.
          type: string
          maxLength: 8
          minLength: 8
          example: "BEEFCAFE"
        applicationInterchangeProfile:
          description: EMV tag 82, the capabilities of the card to support specific functions.
          type: string
          maxLength: 4
          minLength: 4
          example: "5800"
        applicationTransactionCounter:
          description: EMV tag 9F36, application transaction counter value at the terminal at transaction time, encoded as hex.
          type: string
          maxLength: 4
          minLength: 4
          example: "00A0"
        issuerApplicationData:
          description: EMV tag 9F10, issuer application code with subfields.
          type: string
          minLength: 0
          maxLength: 64
          example: "07010104A4000100"
        applicationCryptogram:
          description: EMV tag 9F26, application cryptogram created on the terminal, encoded as hex string.
          type: string
          minLength: 16
          maxLength: 16
          example: "A1A717065FF030A3"
        cryptogramInformationData:
          description: EMV tag 9F27. Identifies the type of cryptogram. Accepted values are "80" (ARQC) or "00" (AAC).
          type: string
          maxLength: 2
          minLength: 2
          example: "80"
        issuerAuthenticationData:
          description: EMV tag 91, data sent to the ICC for online issuer authentication.
          type: string
          minLength: 16
          maxLength: 32
          example: "91102263BCC1C2D9C4420013"
    PanSequenceNumber:
      type: string
      pattern: '\d{1,3}'
      example: "0"
    ResponseActionCode:
      type: string
      description: >
        Result of the detokenization or action code expressing the result of the full transaction. 
        These values are defined according to the ISO 8583 Interface with Cloud TSP specification.
        
         * `000` – Transaction or request approved 
         * `001` – Expired card 
         * `002` – Bad Merchant 
         * `003` – Unknown Card or wrong card status 
         * `004` – Terminal Transaction not permitted 
         * `005` – Cryptographic checks failure (wrong ARQC cryptogram) 
         * `006` – Message Format error 
         * `007` – Invalid amount 
         * `008` – Insufficient funds/over credit limit (token domain control) 
         * `009` – Duplicate transmission detected 
         * `010` – System error 
         * `011` – Lost card 
         * `012` – Stolen card 
         * `013` – Suspect fraud 
         * `014` – Cryptographic Key not supported 
         * `015` – Wrong format in chipRelatedData 
         * `016` – Cryptogram expired (specific to QR Code project) 
         * `017` – Amount in the message field not within allowable limits derived from amount in chipRelatedData
         * `018` – Currency code in the message field does not match currency code in chipRelatedData
         * `019` – Local Verification Results check failed (Apple Pay) 
         * `020` – Required CDCVM stamp is missing 
         * `021` – CDCVM Stamp checking failure 
         * `024` – RFU (Required Cloud PIN stamp is missing) 
         * `025` – RFU (Cloud PIN stamp Stamp checking failure) 
         * `029` – Cloud PIN not supported (Cloud PIN was used
         * `030` – ATC Check failure
      enum:
        - '000'
        - '001'
        - '002'
        - '003'
        - '004'
        - '005'
        - '006'
        - '007'
        - '008'
        - '009'
        - '010'
        - '011'
        - '012'
        - '013'
        - '014'
        - '015'
        - '016'
        - '017'
        - '018'
        - '019'
        - '020'
        - '021'
        - '024'
        - '025'
        - '029'
        - '030'
      example: "000"
    ErrorResponse:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          description: A code describing the type of error that occurred.
          type: string
          example: "invalid-field"
        errorMessage:
          description: A description of the error.
          type: string
          example: "Invalid field 'amount'"
